# -*- coding: UTF-8 -*-
import random
from data.place import places

__author__ = 'Justine Dewilde'
distances = [
    [[0, 1], [97, 1], [165, 1], [260, 1], [259, 1], [303, 1], [1330, 1], [1450, 1], [1370, 1], [1270, 1], [1970, 1], [2340, 1], [2640, 1], [2120, 1], [1750, 1], [1960, 1], [1840, 1], [1600, 1], [1470, 1], [1470, 1], [1260, 1], [1270, 1], [1100, 1], [980, 1], [642, 1], [476, 1], [540, 1], [481, 1], [439, 1]],
    [[97, 1], [0, 1], [81, 1], [262, 1], [199, 1], [246, 1], [1230, 1], [1480, 1], [1400, 1], [1300, 1], [2010, 1], [2360, 1], [2670, 1], [2130, 1], [1780, 1], [1970, 1], [1860, 1], [1570, 1], [1450, 1], [1450, 1], [1250, 1], [1260, 1], [1100, 1], [941, 1], [612, 1], [408, 1], [456, 1], [406, 1], [409, 1]],
    [[165, 1], [81, 1], [0, 1], [204, 1], [126, 1], [165, 1], [1180, 1], [1430, 1], [1360, 1], [1290, 1], [1970, 1], [2340, 1], [2630, 1], [2090, 1], [1750, 1], [194, 1], [1820, 1], [1550, 1], [1390, 1], [1390, 1], [1190, 1], [1190, 1], [1030, 1], [845, 1], [535, 1], [318, 1], [378, 1], [330, 1], [449, 1]],
    [[260, 1], [262, 1], [204, 1], [0, 1], [120, 1], [121, 1], [1010, 1], [1260, 1], [1170, 1], [1100, 1], [1790, 1], [2140, 1], [2450, 1], [1920, 1], [1560, 1], [1750, 1], [1630, 1], [1370, 1], [1230, 1], [1230, 1], [1030, 1], [1030, 1], [870, 1], [752, 1], [407, 1], [362, 1], [423, 1], [449, 1], [640, 1]],
    [[259, 1], [199, 1], [126, 1], [120, 1], [0, 1], [50, 1], [1070, 1], [1350, 1], [1270, 1], [1210, 1], [1870, 1], [2240, 1], [2540, 1], [1990, 1], [1660, 1], [1840, 1], [1710, 1], [1460, 1], [1270, 1], [1270, 1], [1070, 1], [1080, 1], [909, 1], [734, 1], [421, 1], [255, 1], [310, 1], [332, 1], [566, 1]],
    [[303, 1], [246, 1], [165, 1], [121, 1], [50, 1], [0, 1], [1070, 1], [1350, 1], [1270, 1], [1210, 1], [1870, 1], [2240, 1], [2540, 1], [1990, 1], [1660, 1], [1840, 1], [1710, 1], [1460, 1], [1270, 1], [1270, 1], [1070, 1], [1080, 1], [909, 1], [734, 1], [421, 1], [255, 1], [310, 1], [332, 1], [566, 1]],
    [[1330, 1], [1230, 1], [1180, 1], [1010, 1], [1070, 1], [1070, 1], [0, 1], [396, 1], [342, 1], [534, 1], [835, 1], [1170, 1], [1500, 1], [913, 1], [664, 1], [776, 1], [649, 1], [368, 1], [338, 1], [338, 1], [243, 1], [201, 1], [282, 1], [713, 1], [717, 1], [1140, 1], [1150, 1], [1320, 1], [1640, 1]],
    [[1450, 1], [1480, 1], [1430, 1], [1260, 1], [1350, 1], [1350, 1], [396, 1], [0, 1], [87, 1], [314, 1], [522, 1], [889, 1], [1180, 1], [693, 1], [288, 1], [409, 1], [358, 1], [344, 1], [622, 1], [622, 1], [631, 1], [605, 1], [685, 1], [1110, 1], [1060, 1], [1470, 1], [1490, 1], [1630, 1], [1890, 1]],
    [[1370, 1], [1400, 1], [1360, 1], [1170, 1], [1270, 1], [1270, 1], [342, 1], [87, 1], [0, 1], [278, 1], [601, 1], [982, 1], [1260, 1], [757, 1], [380, 1], [583, 1], [487, 1], [372, 1], [593, 1], [593, 1], [572, 1], [534, 1], [616, 1], [1030, 1], [967, 1], [1390, 1], [1410, 1], [1560, 1], [1800, 1]],
    [[1270, 1], [1300, 1], [1290, 1], [1100, 1], [1210, 1], [1210, 1], [534, 1], [314, 1], [278, 1], [0, 1], [768, 1], [1140, 1], [1390, 1], [962, 1], [530, 1], [790, 1], [719, 1], [640, 1], [844, 1], [844, 1], [771, 1], [735, 1], [768, 1], [1140, 1], [989, 1], [1370, 1], [1390, 1], [1520, 1], [1700, 1]],
    [[1970, 1], [2010, 1], [1970, 1], [1790, 1], [1870, 1], [1870, 1], [83, 1], [522, 1], [601, 1], [768, 1], [0, 1], [345, 1], [657, 1], [231, 1], [242, 1], [132, 1], [218, 1], [522, 1], [886, 1], [886, 1], [997, 1], [955, 1], [1110, 1], [1540, 1], [1550, 1], [1980, 1], [1990, 1], [2140, 1], [2420, 1]],
    [[2340, 1], [2360, 1], [2340, 1], [2140, 1], [2240, 1], [2240, 1], [1170, 1], [889, 1], [982, 1], [1140, 1], [345, 1], [0, 1], [345, 1], [263, 1], [606, 1], [390, 1], [502, 1], [812, 1], [1130, 1], [1130, 1], [1280, 1], [1240, 1], [1410, 1], [1820, 1], [1880, 1], [2310, 1], [2320, 1], [2480, 1], [2760, 1]],
    [[2640, 1], [2670, 1], [2630, 1], [2450, 1], [2540, 1], [2540, 1], [1500, 1], [1180, 1], [1260, 1], [1390, 1], [657, 1], [345, 1], [0, 1], [594, 1], [880, 1], [719, 1], [833, 1], [1130, 1], [1480, 1], [1480, 1], [1620, 1], [1580, 1], [1740, 1], [2160, 1], [2210, 1], [2630, 1], [2640, 1], [2810, 1], [3070, 1]],
    [[2120, 1], [2130, 1], [2090, 1], [1920, 1], [1990, 1], [1990, 1], [913, 1], [693, 1], [757, 1], [962, 1], [231, 1], [263, 1], [594, 1], [0, 1], [444, 1], [170, 1], [272, 1], [555, 1], [871, 1], [871, 1], [1020, 1], [989, 1], [1150, 1], [1560, 1], [1630, 1], [2060, 1], [2060, 1], [2230, 1], [2550, 1]],
    [[1750, 1], [1780, 1], [1750, 1], [1560, 1], [1660, 1], [1660, 1], [664, 1], [288, 1], [380, 1], [530, 1], [242, 1], [606, 1], [880, 1], [444, 1], [0, 1], [280, 1], [237, 1], [427, 1], [786, 1], [786, 1], [848, 1], [811, 1], [941, 1], [1370, 1], [1350, 1], [1770, 1], [1780, 1], [1930, 1], [2180, 1]],
    [[1960, 1], [1970, 1], [194, 1], [1750, 1], [1840, 1], [1840, 1], [776, 1], [409, 1], [583, 1], [790, 1], [132, 1], [390, 1], [719, 1], [170, 1], [280, 1], [0, 1], [120, 1], [432, 1], [781, 1], [781, 1], [901, 1], [871, 1], [1030, 1], [1450, 1], [1500, 1], [1910, 1], [1930, 1], [2080, 1], [2380, 1]],
    [[1840, 1], [1860, 1], [1820, 1], [1630, 1], [1710, 1], [1710, 1], [649, 1], [358, 1], [487, 1], [719, 1], [218, 1], [502, 1], [833, 1], [272, 1], [237, 1], [120, 1], [0, 1], [301, 1], [667, 1], [667, 1], [785, 1], [752, 1], [905, 1], [1320, 1], [1370, 1], [1790, 1], [1790, 1], [1960, 1], [2260, 1]],
    [[1600, 1], [1570, 1], [1550, 1], [1370, 1], [1460, 1], [1460, 1], [368, 1], [344, 1], [372, 1], [640, 1], [522, 1], [812, 1], [1130, 1], [555, 1], [427, 1], [432, 1], [301, 1], [0, 1], [374, 1], [374, 1], [493, 1], [455, 1], [613, 1], [1030, 1], [1090, 1], [1520, 1], [1520, 1], [1700, 1], [2020, 1]],
    [[1470, 1], [1450, 1], [1390, 1], [1230, 1], [1270, 1], [1270, 1], [338, 1], [622, 1], [593, 1], [844, 1], [886, 1], [1130, 1], [1480, 1], [871, 1], [786, 1], [781, 1], [667, 1], [374, 1], [0, 1], [0, 1], [210, 1], [204, 1], [360, 1], [711, 1], [855, 1], [1270, 1], [1270, 1], [1440, 1], [1840, 1]],
    [[1470, 1], [1450, 1], [1390, 1], [1230, 1], [1270, 1], [1270, 1], [338, 1], [622, 1], [593, 1], [844, 1], [886, 1], [1130, 1], [1480, 1], [871, 1], [786, 1], [781, 1], [667, 1], [374, 1], [0, 1], [0, 1], [210, 1], [204, 1], [360, 1], [711, 1], [855, 1], [1270, 1], [1270, 1], [1440, 1], [1840, 1]],
    [[1260, 1], [1250, 1], [1190, 1], [1030, 1], [1070, 1], [1070, 1], [243, 1], [631, 1], [572, 1], [771, 1], [997, 1], [1280, 1], [1620, 1], [1020, 1], [848, 1], [901, 1], [785, 1], [493, 1], [210, 1], [210, 1], [0, 1], [43, 1], [157, 1], [542, 1], [666, 1], [1080, 1], [1070, 1], [1260, 1], [1640, 1]],
    [[1270, 1], [1260, 1], [1190, 1], [1030, 1], [1080, 1], [1080, 1], [201, 1], [605, 1], [534, 1], [735, 1], [955, 1], [1240, 1], [1580, 1], [989, 1], [811, 1], [871, 1], [752, 1], [455, 1], [204, 1], [204, 1], [43, 1], [0, 1], [160, 1], [575, 1], [671, 1], [1090, 1], [1100, 1], [1270, 1], [1650, 1]],
    [[1100, 1], [1100, 1], [1030, 1], [870, 1], [909, 1], [909, 1], [282, 1], [685, 1], [616, 1], [768, 1], [1110, 1], [1410, 1], [1740, 1], [1150, 1], [941, 1], [1030, 1], [905, 1], [613, 1], [360, 1], [360, 1], [157, 1], [160, 1], [0, 1], [426, 1], [506, 1], [925, 1], [931, 1], [1100, 1], [1490, 1]],
    [[980, 1], [941, 1], [845, 1], [752, 1], [734, 1], [734, 1], [713, 1], [1110, 1], [1030, 1], [1140, 1], [1540, 1], [1820, 1], [2160, 1], [1560, 1], [1370, 1], [1450, 1], [1320, 1], [1030, 1], [711, 1], [711, 1], [542, 1], [575, 1], [426, 1], [0, 1], [351, 1], [636, 1], [613, 1], [799, 1], [1250, 1]],
    [[642, 1], [612, 1], [535, 1], [407, 1], [421, 1], [421, 1], [717, 1], [1060, 1], [967, 1], [989, 1], [1550, 1], [1880, 1], [2210, 1], [1630, 1], [1350, 1], [1500, 1], [1370, 1], [1090, 1], [855, 1], [855, 1], [666, 1], [671, 1], [506, 1], [351, 1], [0, 1], [431, 1], [434, 1], [596, 1], [985, 1]],
    [[476, 1], [408, 1], [318, 1], [362, 1], [255, 1], [255, 1], [1140, 1], [1470, 1], [1390, 1], [1370, 1], [1980, 1], [2310, 1], [2630, 1], [2060, 1], [1770, 1], [1910, 1], [1790, 1], [1520, 1], [1270, 1], [1270, 1], [1080, 1], [1090, 1], [925, 1], [636, 1], [431, 1], [0, 1], [58, 1], [178, 1], [635, 1]],
    [[540, 1], [456, 1], [378, 1], [423, 1], [310, 1], [310, 1], [1150, 1], [1490, 1], [1410, 1], [1390, 1], [1990, 1], [2320, 1], [2640, 1], [2060, 1], [1780, 1], [1930, 1], [1790, 1], [1520, 1], [1270, 1], [1270, 1], [1070, 1], [1100, 1], [931, 1], [613, 1], [434, 1], [58, 1], [0, 1], [175, 1], [658, 1]],
    [[481, 1], [406, 1], [330, 1], [449, 1], [332, 1], [332, 1], [1320, 1], [1630, 1], [1560, 1], [1520, 1], [2140, 1], [2480, 1], [2810, 1], [2230, 1], [1930, 1], [2080, 1], [1960, 1], [1700, 1], [1440, 1], [1440, 1], [1260, 1], [1270, 1], [1100, 1], [799, 1], [596, 1], [178, 1], [175, 1], [0, 1], [492, 1]],
    [[439, 1], [409, 1], [449, 1], [640, 1], [566, 1], [566, 1], [1640, 1], [1890, 1], [1800, 1], [1700, 1], [2420, 1], [2760, 1], [3070, 1], [2550, 1], [2180, 1], [2380, 1], [2260, 1], [2020, 1], [1840, 1], [1840, 1], [1640, 1], [1650, 1], [1490, 1], [1250, 1], [985, 1], [635, 1], [658, 1], [492, 1], [0, 1]]
, 1]

def getValeursPonderees(indice):
    "récupération de la moyenne suivant les pondérations d'hormones : utilisé pour la probabilité de choix de direction"
    lieux = distances[indice]
    moyennePonderee = 0.0;

    for lieu in lieux:
        moyennePonderee += (lieu[1])

    return moyennePonderee

def getElementPondere(indice, value):
    lieux = distances[indice]
    i = 0
    ponderation = 0.0
    while i < len(lieux)-1 and ponderation < value:
        ponderation += lieux[i][1]
        i += 1

    return i

def randomPondereNoeud(indice):
    #Nombre aléatoire entre 0 et len(palces)
    randomNumber = int(random.random() * (len(places)-1))
    #total pondéré
    pondereValue = getValeursPonderees(indice)
    #valeur a approcher : valeur pondérée totale divisée par un nombre aléatoire
    if(randomNumber == 0):
        valueToTouch = 0
    else:
        valueToTouch = pondereValue/randomNumber

    return getElementPondere(indice, valueToTouch)

#Fonction permettant d'incrémenter les hormones à une places donnée
def incrementHormones(indice, position):
    distances[indice][position][1] += distances[indice][position][1]*0.3

#Fonction permettant de d'écrémenter les hormones
def decrementAll():
    nbrPlaces = len(places)
    i = 0
    while i < nbrPlaces:
        j = 0
        while j < nbrPlaces:
            distances[i][j][1] -= distances[i][j][1]*0.1
            print(str(distances[i][j][1]))
            j += 1
        i += 1

#Fonction permettant de définir si la téléportation est plus rapide
def isBetterWithTeleportation(origine, destination):
    #la téléportation est plus intéressante si elle revient à rejoindre un point de destination plus rapidement qu'a pieds
    return getTeleportationTime() < getWalkingTime(origine, destination)

#récupération de la distance a parcourir en m
def getDistanceToGo(origine, destination):
    return distances[origine][destination][0]

#récupération de du temps de marche
def getWalkingTime(origine, destination):
    distanceToGo = getDistanceToGo(origine, destination)
    #5 km/h > 5*1000/60 mètres par min
    return distanceToGo/(5*1000/60)

#récupération du temps de téléportation
def getTeleportationTime():
    return 5